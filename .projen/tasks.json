{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "build:publishing/github": {
      "name": "build:publishing/github",
      "steps": [
        {
          "exec": "yarn install --frozen-lockfile",
          "cwd": "lib/publishing/github"
        },
        {
          "exec": "yarn tsc --build",
          "cwd": "lib/publishing/github"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "bundle:package-integrity": {
      "name": "bundle:package-integrity",
      "description": "Bundle the package integrity script",
      "steps": [
        {
          "exec": "esbuild --bundle lib/package-integrity/handler/validate.js --target=\"node14\" --platform=\"node\" --outfile=\"lib/package-integrity/handler/validate.bundle.js\" --sourcemap=inline"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "spawn": "compile:custom-resource-handlers"
        },
        {
          "spawn": "build:publishing/github"
        },
        {
          "exec": "tsc --build"
        },
        {
          "spawn": "bundle:package-integrity"
        }
      ]
    },
    "compile:custom-resource-handlers": {
      "name": "compile:custom-resource-handlers",
      "steps": [
        {
          "exec": "/bin/bash ./build-custom-resource-handlers.sh"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern lib lib/__tests__ build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ:diff": {
      "name": "integ:diff",
      "steps": [
        {
          "exec": "/bin/bash ./lib/__tests__/run-test.sh"
        }
      ]
    },
    "integ:update": {
      "name": "integ:update",
      "steps": [
        {
          "exec": "/bin/bash ./lib/__tests__/run-test.sh update"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(npm pack) dist/js/"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "env": {
        "TZ": "UTC"
      },
      "steps": [
        {
          "exec": "jest --passWithNoTests --coverageProvider=v8 --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:diff"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='minipass,node-ical,aws-cdk-lib,constructs'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='minipass,node-ical,aws-cdk-lib,constructs'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='minipass,node-ical,aws-cdk-lib,constructs'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='minipass,node-ical,aws-cdk-lib,constructs'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='minipass,node-ical,aws-cdk-lib,constructs'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/adm-zip @types/aws-lambda @types/follow-redirects @types/fs-extra @types/jest @types/node @types/tar @typescript-eslint/eslint-plugin @typescript-eslint/parser adm-zip aws-cdk aws-sdk aws-sdk-mock esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint follow-redirects fs-extra jest jest-create-mock-instance jest-junit JSONStream minipass node-ical npm-check-updates projen rrule standard-version tar ts-jest ts-node typescript changelog-parser"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")",
    "RELEASE": "1"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
